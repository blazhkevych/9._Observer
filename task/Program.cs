namespace task;

/*
Observer
С использованием паттерна Observer реализовать приложение, реализующее следующую логику. 
При старте программы в консоль выводятся два смайлика в произвольные позиции.
В программе используются четыре управляющих клавиши (клавиши управления курсором) - Up, Down, Left, Right. 
Объект наблюдения, обрабатывающий события нажатия клавиш управления, с помощью механизма посылки сообщений оповещает 
объекты-наблюдатели (смайлики) о событии нажатия на одну из управляющих клавиш.
Объекты-наблюдатели, получив сообщение, должны перемещать смайлики в определенном направлении (если нажата управляющая клавиша Up, то вверх, 
если Down, то вниз и т.д.).
При нажатии на клавиши L или R необходимо производить подписку или отмену подписки соответствующего объекта-наблюдателя (левого или правого смайлика) на получение сообщений. 
Например, нажав на клавишу R, происходит подписка объектанаблюдателя (правого смайлика) на получение сообщений от объекта управляющих клавиш. 
При повторном нажатии на клавишу R подписка отменяется. 
*/

internal static class Program
{

    private static void Main()
    {

    }
}

/*
  ConcreteSubject - конкретный субъект:
	 - сохраняет состояние, представляющее интерес для конкретного наблюдателя ConcreteObserver;
	 - посылает информацию своим наблюдателям, когда происходит изменение;
*/
internal class ConcreteSubject : Subject
{
    private int _state;

    public int State
    {
        get { return _state; }
        set
        {
            _state = value;
            Notify();
        }
    }
}


/*
 ConcreteObserver - конкретный наблюдатель:
	 - хранит ссылку на объект класса ConcreteSubject;
	 - сохраняет данные, которые должны быть согласованы с данными субъекта;
	 - реализует интерфейс обновления, определенный в классе Observer, чтобы поддерживать согласованность с субъектом.
*/


/*
Observer - наблюдатель: это общий базовый класс для всех возможных наблюдателей.
		 - определяет интерфейс обновления для объектов, которые должны быть уведомлены об изменении субъекта;
*/
internal abstract class Observer
{
    public abstract void Update();
}

/* Subject
- субъект: располагает информацией о своих наблюдателях. За субъектом может «следить» любое число наблюдателей;
- предоставляет интерфейс для присоединения и отделения наблюдателей;
*/
internal abstract class Subject
{
    private readonly List<Observer> _observers = new List<Observer>();

    public void Attach(Observer observer)
    {
        _observers.Add(observer);
    }

    public void Detach(Observer observer)
    {
        _observers.Remove(observer);
    }

    public void Notify()
    {
        foreach (var observer in _observers)
        {
            observer.Update();
        }
    }
}

